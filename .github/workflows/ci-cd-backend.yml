name: CI/CD Backend

on:
  push:
    branches:
      - master

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

jobs:
  prepare:
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Build Web
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_IP }}
          username: 'ubuntu'
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          script: |
            cd /home/ubuntu/micro_ai
            git pull origin master
            
            # ensure db and redis are up
            docker-compose -p backend -f docker-compose-prod.yml up -d redis
            docker-compose -p backend -f docker-compose-prod.yml up -d db            

  build:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    needs: prepare

    steps:
      - name: Build Web
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_IP }}
          username: 'ubuntu'
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          script: |
            cd /home/ubuntu/micro_ai
            git pull origin master
            docker-compose -p backend -f docker-compose-prod.yml build web-staging

      - name: Build Celery
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_IP }}
          username: 'ubuntu'
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          script: |
            cd /home/ubuntu/micro_ai
            git pull origin master
            docker-compose -p backend -f docker-compose-prod.yml build celery 

  staging:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    needs: build

    steps:
      - name: Deploy Staging
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_IP }}
          username: 'ubuntu'
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          script: |
            if [ -d "/docker/volumes/backend-staging" ]; then
              cd /docker/volumes/backend-staging
              docker-compose -p backend -f docker-compose-dev.yml down web-staging
              docker-compose -p backend -f docker-compose-dev.yml down celery
            else
              echo "Directory /docker/volumes/backend-staging does not exist. Skipping."
            fi
            
            cd /home/ubuntu/micro_ai
            rsync -r --delete ./ /docker/volumes/backend-staging
            
            cd /docker/volumes/backend-staging
            docker-compose -p backend -f docker-compose-dev.yml up -d web-staging
            docker-compose -p backend -f docker-compose-dev.yml up -d celery
            


#jobs:
#  build:
#    runs-on: ubuntu-latest
#    timeout-minutes: 60
#
#    steps:
#      - name: Checkout Code
#        uses: actions/checkout@v4
#
#      - name: Check Docker Version
#        run: |
#          docker --version
#          docker compose version
#
#      - name: Copy .env.example to .env
#        run: |
#          cp .env.example .env
#
#      # TODO: breaks with an error
#      # - name: Run Tests
#      #   run: |
#      #     docker compose up -d
#      #     docker compose run --rm --no-deps web python manage.py test
#
#      - name: Deploy - Take Down Current Production Containers
#        uses: appleboy/ssh-action@v1.0.3
#        with:
#          host: ${{ secrets.SERVER_IP }}
#          username: 'ubuntu'
#          key: ${{ secrets.SSH_PRIVATE_KEY }}
#          port: 22
#          script: |
#            cd /home/ubuntu/microai-frontend
#            sudo docker-compose -f docker-compose.prod.yml stop -t 30
#            sudo docker-compose -f docker-compose.prod.yml down
#            cd /home/ubuntu/micro_ai
#            sudo docker-compose -f docker-compose-prod.yml stop -t 30
#            sudo docker-compose -f docker-compose-prod.yml down
#
#      - name: Deploy - Pull Latest Code
#        uses: appleboy/ssh-action@v1.0.3
#        with:
#          host: ${{ secrets.SERVER_IP }}
#          username: 'ubuntu'
#          key: ${{ secrets.SSH_PRIVATE_KEY }}
#          port: 22
#          script: |
#            cd /home/ubuntu/micro_ai
#            git pull origin master
#
#      - name: Deploy - Start Updated Backend
#        uses: appleboy/ssh-action@v1.0.3
#        with:
#          host: ${{ secrets.SERVER_IP }}
#          username: 'ubuntu'
#          key: ${{ secrets.SSH_PRIVATE_KEY }}
#          port: 22
#          script: |
#            cd /home/ubuntu/micro_ai
#            sudo docker-compose -f docker-compose-prod.yml build --no-cache
#            sudo docker-compose -f docker-compose-prod.yml up -d
#
#      - name: Wait for Backend Containers
#        uses: appleboy/ssh-action@v1.0.3
#        with:
#          host: ${{ secrets.SERVER_IP }}
#          username: 'ubuntu'
#          key: ${{ secrets.SSH_PRIVATE_KEY }}
#          port: 22
#          script: |
#            timeout=300
#            while [ $timeout -gt 0 ]; do
#              if docker ps | grep -q web && docker ps | grep -q redis && docker ps | grep -q celery && docker ps | grep -q db; then
#                echo "Backend containers running"
#                exit 0
#              fi
#              sleep 5
#              timeout=$((timeout-5))
#            done
#            exit 1
#
#      - name: Deploy - Restarted frontend with new docker network
#        uses: appleboy/ssh-action@v1.0.3
#        with:
#          host: ${{ secrets.SERVER_IP }}
#          username: 'ubuntu'
#          key: ${{ secrets.SSH_PRIVATE_KEY }}
#          port: 22
#          script: |
#            cd /home/ubuntu/microai-frontend
#            sudo docker-compose -f docker-compose.prod.yml up -d
#
#      - name: Wait for Frontend Containers
#        uses: appleboy/ssh-action@v1.0.3
#        with:
#          host: ${{ secrets.SERVER_IP_DEV }}
#          username: 'ubuntu'
#          key: ${{ secrets.SSH_PRIVATE_KEY_DEV }}
#          port: 22
#          script: |
#            timeout=300
#            while [ $timeout -gt 0 ]; do
#              if docker ps | grep -q nginx && docker ps | grep -q frontend; then
#                echo "Frontend containers running"
#                exit 0
#              fi
#              sleep 5
#              timeout=$((timeout-5))
#            done
#            exit 1
#
#      - name: Deploy - Checking that all necessary containers are running before prunning
#        uses: appleboy/ssh-action@v1.0.3
#        id: check-containers
#        with:
#          host: ${{ secrets.SERVER_IP }}
#          username: 'ubuntu'
#          key: ${{ secrets.SSH_PRIVATE_KEY }}
#          port: 22
#          script: |
#            # Check if the specified containers are running
#            running_containers=$(sudo docker ps --filter "name=frontend" --filter "name=nginx" --filter "name=web" --filter "name=redis" --filter "name=celery" --filter "name=db" --format "{{.Names}}")
#            required_containers=("frontend" "nginx" "web" "redis" "celery" "db")
#            all_running=true
#
#            for container in "${required_containers[@]}"; do
#              if [[ ! "$running_containers" == *"$container"* ]]; then
#                echo "Container $container is not running."
#                all_running=false
#              fi
#            done
#
#            if [ "$all_running" = false ]; then
#              echo "One or more required containers are not running. Exiting..."
#              exit 1
#            fi
#
#            echo "All required containers are running."
#
#      - name: Deploy - Prune unused Docker containers, images
#        uses: appleboy/ssh-action@v1.0.3
#        if: success() # Only run if previous steps succeeded
#        with:
#          host: ${{ secrets.SERVER_IP }}
#          username: 'ubuntu'
#          key: ${{ secrets.SSH_PRIVATE_KEY }}
#          port: 22
#          script: |
#            echo "Pruning unused Docker resources..."
#            # Only remove stopped containers
#            sudo docker container prune -f
#            # Only remove dangling images
#            sudo docker image prune -f
#            # Never prune volumes automatically
#            sudo docker builder prune -f
#
#            # Optional: List unused volumes (but don't remove them automatically)
#            echo "Listing unused volumes (for information only):"
#            for volume in $(sudo docker volume ls -q); do
#               if ! sudo docker ps -a --filter volume=$volume | grep -q .; then
#                  echo "Unused volume found: $volume"
#               fi
#            done