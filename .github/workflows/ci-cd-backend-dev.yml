name: CI/CD Backend

on:
  push:
    branches:
      - dev
      
concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4 

    - name: Check Docker Version
      run: |
        docker --version
        docker compose version

    - name: Copy .env.example to .env
      run: |
        cp .env.example .env

    # TODO: breaks with an error
    # - name: Run Tests
    #   run: |
    #     docker compose up -d
    #     docker compose run --rm --no-deps web python manage.py test

    - name: Deploy - Take Down Current Production Containers
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SERVER_IP_DEV }}
        username: 'ubuntu'
        key: ${{ secrets.SSH_PRIVATE_KEY_DEV }}
        port: 22
        script: |
          cd /home/ubuntu/microai-frontend
          sudo docker-compose -f docker-compose.dev.yml stop -t 30
          sudo docker-compose -f docker-compose.dev.yml down
          cd /home/ubuntu/micro_ai
          sudo docker-compose -f docker-compose-dev.yml stop -t 30
          sudo docker-compose -f docker-compose-dev.yml down
          
    - name: Deploy - Pull Latest Code
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SERVER_IP_DEV }}
        username: 'ubuntu'
        key: ${{ secrets.SSH_PRIVATE_KEY_DEV }}
        port: 22
        script: |
          cd /home/ubuntu/micro_ai
          git pull origin dev

    - name: Deploy - Start Updated Backend 
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SERVER_IP_DEV }}
        username: 'ubuntu'
        key: ${{ secrets.SSH_PRIVATE_KEY_DEV }}
        port: 22
        script: |
          cd /home/ubuntu/micro_ai
          sudo docker-compose -f docker-compose-dev.yml build --no-cache
          sudo docker-compose -f docker-compose-dev.yml up -d

    - name: Wait for Backend Containers
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SERVER_IP_DEV }}
        username: 'ubuntu'
        key: ${{ secrets.SSH_PRIVATE_KEY_DEV }}
        port: 22
        script: |
          timeout=300
          while [ $timeout -gt 0 ]; do
            if docker ps | grep -q web && docker ps | grep -q redis && docker ps | grep -q celery && docker ps | grep -q db; then
              echo "Backend containers running"
              exit 0
            fi
            sleep 5
            timeout=$((timeout-5))
          done
          exit 1

    - name: Deploy - Restarted frontend with new docker network
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SERVER_IP_DEV }}
        username: 'ubuntu'
        key: ${{ secrets.SSH_PRIVATE_KEY_DEV }}
        port: 22
        script: |
          cd /home/ubuntu/microai-frontend
          sudo docker-compose -f docker-compose.prod.yml up -d

    - name: Wait for Frontend Containers
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SERVER_IP_DEV }}
        username: 'ubuntu'
        key: ${{ secrets.SSH_PRIVATE_KEY_DEV }}
        port: 22
        script: |
          timeout=300
          while [ $timeout -gt 0 ]; do
            if docker ps | grep -q nginx && docker ps | grep -q frontend; then
              echo "Frontend containers running"
              exit 0
            fi
            sleep 5
            timeout=$((timeout-5))
          done
          exit 1

    - name: Deploy - Checking that all necessary containers are running before prunning
      uses: appleboy/ssh-action@v1.0.3
      id: check-containers
      with:
        host: ${{ secrets.SERVER_IP_DEV }}
        username: 'ubuntu'
        key: ${{ secrets.SSH_PRIVATE_KEY_DEV }}
        port: 22
        script: |
          # Check if the specified containers are running
          running_containers=$(sudo docker ps --filter "name=frontend" --filter "name=nginx" --filter "name=web" --filter "name=redis" --filter "name=celery" --filter "name=db" --format "{{.Names}}")
          required_containers=("frontend" "nginx" "web" "redis" "celery" "db")
          all_running=true
              
          for container in "${required_containers[@]}"; do
            if [[ ! "$running_containers" == *"$container"* ]]; then
              echo "Container $container is not running."
              all_running=false
            fi
          done
    
          if [ "$all_running" = false ]; then
            echo "One or more required containers are not running. Exiting..."
            exit 1
          fi
    
          echo "All required containers are running."

    - name: Deploy - Prune unused Docker containers, images, and volumes
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SERVER_IP_DEV }}
        username: 'ubuntu'
        key: ${{ secrets.SSH_PRIVATE_KEY_DEV }}
        port: 22
        script: |
          echo "Pruning unused Docker images, containers, volumes..."
          sudo docker container prune -f
          sudo docker image prune -a -f
          sudo docker volume prune -f
          sudo docker builder prune -f
          for volume in $(sudo docker volume ls -q); do
            echo "Attempting to remove volume: $volume"
            sudo docker volume rm $volume 2>/dev/null || echo "Volume $volume is in use, skipping."
          done