# \micro_ai\docker-compose.yml

services:
  db:
    container_name: db
    image: postgres
    # persist data beyond lifetime of container
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_DB=${DATABASE_NAME}
      - POSTGRES_USER=${DATABASE_USER}
      - POSTGRES_PASSWORD=${DATABASE_PASSWORD}
    ports:
      - "5432:5432"
    networks:
      - microaiNetwork
    healthcheck:
      test: pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}
      interval: 5s
      retries: 20
  web:
    container_name: web
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    command: sh -c "python manage.py migrate && python manage.py runserver 0.0.0.0:8000"
    volumes:
      - ./backend:/code
      - media_data:/code/media
    ports:
      - "8000:8000"
    env_file:
      - ./.env
    restart: unless-stopped
    networks:
      - microaiNetwork
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "-c", "import socket; socket.create_connection(('localhost', 8000), timeout=1)"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 15s
  frontend:
    container_name: frontend
    build:
      context: ./frontend
      dockerfile: Dockerfile
    expose:
      - "3000"
    volumes:
      #- ./frontend:/frontend
      - /frontend/node_modules
    networks:
      - microaiNetwork
    env_file:
      - ./.env
    environment:
      - NODE_ENV=development
      - WATCHPACK_POLLING=true
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
    healthcheck:
      test: ["CMD-SHELL", "node -e \"const http = require('http'); const options = { host: 'localhost', port: 3000, path: '/', timeout: 2000 }; const request = http.request(options, (res) => { process.exit(res.statusCode === 200 ? 0 : 1); }); request.on('error', () => process.exit(1)); request.end();\""]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 20s

  nginx:
    image: nginx:alpine
    ports:
      - "8081:80"
    volumes:
      - ./nginx/nginx.local.conf:/etc/nginx/conf.d/default.conf
    networks:
      - microaiNetwork
    depends_on:
      frontend:
        condition: service_healthy
      web:
        condition: service_healthy

volumes:
  postgres_data:
  static:
  media_data:

networks:
  microaiNetwork:
    driver: bridge
