# \micro_ai\Dockerfile.web
# Multi-stage Docker buildfile
# See https://docs.docker.com/build/guide/multi-stage/

# Stage 1: Build the python dependencies
FROM python:3.11-slim-bookworm as build-python
RUN apt-get update \
  && apt-get install -y build-essential libpq-dev
COPY ./requirements /requirements
RUN pip install --upgrade pip wheel pip-tools \
    && pip-compile /requirements/requirements.in \
    && pip-compile /requirements/prod-requirements.in \
    && pip wheel --no-cache-dir --no-deps --wheel-dir /wheels \
       -r /requirements/requirements.txt \
       -r /requirements/prod-requirements.txt

# Stage 2: Build the front end files
FROM node:20-bookworm-slim AS build-node
RUN node -v && npm -v
WORKDIR /code
COPY *.json *.js .babelrc /code/
COPY assets /code/assets/
COPY api-client /code/api-client/

RUN npm install

# Build needs everything because it needs to be able to do the tailwind class detection/purging stuff
COPY . /code
RUN npm run build

# Stage 3: Build the final image
FROM python:3.11-slim-bookworm
ENV PYTHONUNBUFFERED 1
ENV DEBUG 0

RUN apt-get update \
  && apt-get install -y \
  curl \
  libpq-dev \
  gettext \
  && apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false \
  && rm -rf /var/lib/apt/lists/*

RUN addgroup --system django \
    && adduser --system --ingroup django django \
    && mkdir -p /code/media \
    && chown -R django:django /code/media

# Copy Python dependencies from the previous stage
COPY --from=build-python /wheels /wheels
COPY ./requirements /requirements
RUN pip install --upgrade pip wheel pip-tools \
    && pip-compile /requirements/requirements.in \
    && pip-compile /requirements/prod-requirements.in \
    && pip install --no-index --find-links=/wheels \
       -r /requirements/requirements.txt \
       -r /requirements/prod-requirements.txt \
    && rm -rf /wheels \
    && rm -rf /root/.cache/pip/*

WORKDIR /code

# Copy the application code
# TODO: "chown -R django:django" doesn't change user/role of the files for some reason
COPY . /code
COPY --from=build-node /code/static /code/static
RUN mkdir static_root \
    && chown -R django:django /code \    
    && chmod +x /code/deploy/docker_startup.sh 

# Use the entrypoint script to start the application
CMD /code/deploy/docker_startup.sh